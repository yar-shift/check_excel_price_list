function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    .addItem("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", "importData")
    .addItem("üîÑ –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–Ω—ã —Å –∑–∞–∫–∞–∑–∞–º–∏", "matchPricesWithOrder")
    .addSeparator()
    .addItem("üõ† –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", "onOpen")
    .addToUi();
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –≤ –∏–Ω–¥–µ–∫—Å
function columnLetterToIndex(letter) {
  if (!letter) return null;
  var column = 0;
  for (var i = 0; i < letter.length; i++) {
    column = column * 26 + (letter.charCodeAt(i) - "A".charCodeAt(0) + 1);
  }
  return column - 1;
}

function importData() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheetSettings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤");
  var sheetPrices = ss.getSheetByName("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–∞–π—Å—ã");
  var sheetOrder = ss.getSheetByName("order_gsm");

  if (!sheetSettings || !sheetPrices || !sheetOrder) {
    Logger.log("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –∏–∑ –ª–∏—Å—Ç–æ–≤ (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–∞–π—Å—ã, order_gsm).");
    return;
  }

  var settings = sheetSettings.getDataRange().getValues();
  sheetPrices.clear();
  sheetPrices.appendRow(["–ü–æ—Å—Ç–∞–≤—â–∏–∫", "–ê—Ä—Ç–∏–∫—É–ª", "–®–ö", "–¢–æ–≤–∞—Ä", "–¶–µ–Ω–∞", "–í–∞–ª—é—Ç–∞"]);
  sheetOrder.clear();
  sheetOrder.appendRow(["–ê—Ä—Ç–∏–∫—É–ª", "–®–ö", "–¢–æ–≤–∞—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–í–∞–ª—é—Ç–∞"]);  // –î–æ–±–∞–≤–ª—è–µ–º "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"

  var folder = DriveApp.getFolderById("1Z1UveqEIqy6IKmoS5-MADet2thbtvzMJ");
  var files = folder.getFiles();

  while (files.hasNext()) {
    var file = files.next();
    var fileBlob = file.getBlob();
    var resource = { title: file.getName(), mimeType: MimeType.GOOGLE_SHEETS };
    var googleSheetFile = Drive.Files.insert(resource, fileBlob);
    var ssTemp = SpreadsheetApp.openById(googleSheetFile.id);
    
    Logger.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ' + file.getName());

    for (var i = 1; i < settings.length; i++) {
      var supplier = settings[i][0];
      var fileName = settings[i][1].trim();
      var sheetName = settings[i][2].trim();

      if (file.getName() !== fileName) continue;

      var artCol = columnLetterToIndex(settings[i][3]);
      var barcodeCol = settings[i][4] ? columnLetterToIndex(settings[i][4]) : null;
      var nameCol = settings[i][5] ? columnLetterToIndex(settings[i][5]) : null;
      var priceCol = settings[i][6] ? columnLetterToIndex(settings[i][6]) : null;
      var quantityCol = settings[i][7] ? columnLetterToIndex(settings[i][7]) : null;  // –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
      var currency = settings[i][8] ? settings[i][8].trim() : "RUB";
      var rate = parseFloat(settings[i][9].toString().replace(",", ".")) || 1;
      var startRow = parseInt(settings[i][10]) || 1;
      var endRow = parseInt(settings[i][11]) || startRow;

      var sheet = ssTemp.getSheetByName(sheetName);
      if (!sheet) {
        Logger.log('–õ–∏—Å—Ç ' + sheetName + ' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ ' + file.getName());
        continue;
      }

      Logger.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ª–∏—Å—Ç–µ ' + sheetName + ', —Å—Ç—Ä–æ–∫–∏ —Å ' + startRow + ' –ø–æ ' + endRow);

      try {
        var dataRange = sheet.getRange(startRow, 1, endRow - startRow + 1, sheet.getLastColumn());
        var data = dataRange.getValues();

        for (var j = 0; j < data.length; j++) {
          var art = data[j][artCol] || "";
          var barcode = barcodeCol !== null ? data[j][barcodeCol] || "" : "";
          var name = nameCol !== null ? data[j][nameCol] || "" : "";
          var price = priceCol !== null ? data[j][priceCol] || "" : "";
          var quantity = quantityCol !== null ? data[j][quantityCol] || "" : "";  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
          var priceInRub = (currency === "CNY" && price) ? price * rate : price;

          if (!art) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

          if (supplier === "–ó–∞–∫–∞–∑") {
            sheetOrder.appendRow([art, barcode, name, quantity, priceInRub, currency]); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
          } else {
            sheetPrices.appendRow([supplier, art, barcode, name, priceInRub, "RUB"]);
          }
        }
      } catch (e) {
        Logger.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç–µ ' + sheetName + ': ' + e.message);
      }
    }

    DriveApp.getFileById(googleSheetFile.id).setTrashed(true);
  }

  Logger.log('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}


function matchPricesWithOrder() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheetPrices = ss.getSheetByName("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–∞–π—Å—ã");
  var sheetOrder = ss.getSheetByName("order_gsm");
  var sheetSummary = ss.getSheetByName("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞");
  var sheetSettings = ss.getSheetByName("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤");

  if (!sheetPrices || !sheetOrder || !sheetSummary || !sheetSettings) {
    Logger.log("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –ª–∏—Å—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
    return;
  }

  var orderData = sheetOrder.getDataRange().getValues();
  var pricesData = sheetPrices.getDataRange().getValues();
  var settingsData = sheetSettings.getDataRange().getValues();

  if (orderData.length < 2 || pricesData.length < 2 || settingsData.length < 2) {
    Logger.log("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–∫–∞–∑–µ, –ø—Ä–∞–π—Å–∞—Ö –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.");
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
  var headers = ["–ê—Ä—Ç–∏–∫—É–ª", "–®–ö", "–¢–æ–≤–∞—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"];
  var suppliers = [];

  for (var i = 1; i < settingsData.length; i++) {
    var supplier = settingsData[i][0];
    if (supplier !== "–ó–∞–∫–∞–∑" && supplier !== "Order_GSM") {
      headers.push(supplier);
      suppliers.push(supplier);
    }
  }

  sheetSummary.clear();
  sheetSummary.appendRow(headers);

  var orderMap = {};

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ (–ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –®–ö)
  for (var i = 1; i < orderData.length; i++) {
    var art = orderData[i][0] ? orderData[i][0].toString().trim() : "";
    var barcode = orderData[i][1] ? orderData[i][1].toString().trim() : "";
    var name = orderData[i][2] || "";
    var qty = orderData[i][3] || "";

    if (art) orderMap[art] = { barcode, name, qty, prices: {} };
    if (barcode) orderMap[barcode] = { barcode, name, qty, prices: {} };
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
  for (var i = 1; i < pricesData.length; i++) {
    var supplier = pricesData[i][0];
    var art = pricesData[i][1] ? pricesData[i][1].toString().trim() : "";
    var barcode = pricesData[i][2] ? pricesData[i][2].toString().trim() : "";
    var price = pricesData[i][4] || "";

    if (orderMap[art]) {
      orderMap[art].prices[supplier] = price;
    }
    if (orderMap[barcode]) {
      orderMap[barcode].prices[supplier] = price;
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
  for (var key in orderMap) {
    var row = [
      key,
      orderMap[key].barcode,
      orderMap[key].name,
      orderMap[key].qty
    ];

    for (var s = 0; s < suppliers.length; s++) {
      row.push(orderMap[key].prices[suppliers[s]] || "");
    }

    sheetSummary.appendRow(row);
  }

  Logger.log("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!");
}
